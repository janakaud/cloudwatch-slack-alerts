{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project cloudwatch-slack-alerts. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    },
    "envVarSLACKICONParameter": {
      "Type": "String",
      "Description": "Value of the environment variable: SLACK_ICON, for all Lambdas"
    },
    "envVarSLACKWEBHOOKURLcloudwatchLogsSlackAlertsParameter": {
      "Type": "String",
      "Description": "Value of the environment variable: SLACK_WEBHOOK_URL, for Lambda: cloudwatchLogsSlackAlerts"
    },
    "envVarSLACKCHANNELcloudwatchLogsSlackAlertsParameter": {
      "Type": "String",
      "Description": "Value of the environment variable: SLACK_CHANNEL, for Lambda: cloudwatchLogsSlackAlerts"
    },
    "envVarSLACKUSERcloudwatchLogsSlackAlertsParameter": {
      "Type": "String",
      "Description": "Value of the environment variable: SLACK_USER, for Lambda: cloudwatchLogsSlackAlerts"
    },
    "envVarLOGGROUPScloudwatchLogsSlackAlertsParameter": {
      "Type": "String",
      "Description": "Value of the environment variable: LOG_GROUPS, for Lambda: cloudwatchLogsSlackAlerts"
    }
  },
  "Outputs": {
    "cloudwatchLogsSlackAlerts": {
      "Description": "ARN of Lambda function CloudWatch-Logs-Slack-Alerts",
      "Value": {
        "Fn::GetAtt": [
          "cloudwatchLogsSlackAlerts",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "cwecloudwatcher": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "cloudwatcher",
        "ScheduleExpression": "rate(2 minutes)",
        "Targets": [
          {
            "Id": "cwecloudwatcherTarget",
            "Arn": {
              "Fn::GetAtt": [
                "cloudwatchLogsSlackAlerts",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "cloudwatchLogsSlackAlerts": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "CloudWatch-Logs-Slack-Alerts",
        "Description": "Periodically produce Slack alerts for new CloudWatch logs matching a given pattern, across multiple log groups",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "cloudwatch-logs-slack-alerts.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "cloudwatchLogsSlackAlertsExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "POLL_PERIOD_MS": "120000",
            "SLACK_ICON": {
              "Ref": "envVarSLACKICONParameter"
            },
            "SLACK_WEBHOOK_URL": {
              "Ref": "envVarSLACKWEBHOOKURLcloudwatchLogsSlackAlertsParameter"
            },
            "SLACK_CHANNEL": {
              "Ref": "envVarSLACKCHANNELcloudwatchLogsSlackAlertsParameter"
            },
            "SLACK_USER": {
              "Ref": "envVarSLACKUSERcloudwatchLogsSlackAlertsParameter"
            },
            "LOG_GROUPS": {
              "Ref": "envVarLOGGROUPScloudwatchLogsSlackAlertsParameter"
            },
            "LOG_PATTERN": "?ERROR ?WARN",
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "cloudwatchLogsSlackAlertsExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "cloudwatchLogsSlackAlertsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                    }
                  ],
                  "Action": [
                    "logs:FilterLogEvents"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "cwecloudwatcherPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "cloudwatchLogsSlackAlerts"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "cwecloudwatcher",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com"
      }
    }
  }
}